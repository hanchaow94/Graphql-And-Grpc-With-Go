// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type UserInterface interface {
	IsUserInterface()
}

type Chat struct {
	ChatWith *UserBasic `json:"chatWith"`
	History  []*string  `json:"history"`
}

type Operation struct {
	From     string    `json:"from"`
	To       string    `json:"to"`
	Operator *Operator `json:"operator"`
	Message  string    `json:"message"`
}

type Picture struct {
	URL         string `json:"url"`
	Description string `json:"description"`
}

type UserBasic struct {
	ID         string `json:"id"`
	Name       string `json:"name"`
	Gender     Gender `json:"gender"`
	Age        int    `json:"age"`
	Location   string `json:"location"`
	University string `json:"university"`
	Company    string `json:"company"`
}

func (UserBasic) IsUserInterface() {}

type UserProfile struct {
	ID         string     `json:"id"`
	Name       string     `json:"name"`
	Gender     Gender     `json:"gender"`
	Age        int        `json:"age"`
	Location   string     `json:"location"`
	University string     `json:"university"`
	Company    string     `json:"company"`
	Pictures   []*Picture `json:"pictures"`
	Chats      []*Chat    `json:"chats"`
}

func (UserProfile) IsUserInterface() {}

type UserShowFile struct {
	ID         string     `json:"id"`
	Name       string     `json:"name"`
	Gender     Gender     `json:"gender"`
	Age        int        `json:"age"`
	Location   string     `json:"location"`
	University string     `json:"university"`
	Company    string     `json:"company"`
	Pictures   []*Picture `json:"pictures"`
}

func (UserShowFile) IsUserInterface() {}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Operator string

const (
	OperatorLike    Operator = "LIKE"
	OperatorDislike Operator = "DISLIKE"
	OperatorDelete  Operator = "DELETE"
	OperatorFavor   Operator = "FAVOR"
	OperatorMessage Operator = "MESSAGE"
)

var AllOperator = []Operator{
	OperatorLike,
	OperatorDislike,
	OperatorDelete,
	OperatorFavor,
	OperatorMessage,
}

func (e Operator) IsValid() bool {
	switch e {
	case OperatorLike, OperatorDislike, OperatorDelete, OperatorFavor, OperatorMessage:
		return true
	}
	return false
}

func (e Operator) String() string {
	return string(e)
}

func (e *Operator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Operator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Operator", str)
	}
	return nil
}

func (e Operator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
